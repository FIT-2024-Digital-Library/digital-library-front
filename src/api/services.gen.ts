// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
  formDataBodySerializer,
} from '@hey-api/client-fetch';
import type {
  GetBooksBooksGetData,
  GetBooksBooksGetError,
  GetBooksBooksGetResponse,
  GetBookBooksBookIdGetData,
  GetBookBooksBookIdGetError,
  GetBookBooksBookIdGetResponse,
  CreateBookBooksCreatePostData,
  CreateBookBooksCreatePostError,
  CreateBookBooksCreatePostResponse,
  UpdateBookBooksBookIdUpdatePutData,
  UpdateBookBooksBookIdUpdatePutError,
  UpdateBookBooksBookIdUpdatePutResponse,
  DeleteBookBooksBookIdDeleteDeleteData,
  DeleteBookBooksBookIdDeleteDeleteError,
  DeleteBookBooksBookIdDeleteDeleteResponse,
  GetProfileUsersProfileGetError,
  GetProfileUsersProfileGetResponse,
  LoginUsersLoginPostData,
  LoginUsersLoginPostError,
  LoginUsersLoginPostResponse,
  RegisterUsersRegisterPostData,
  RegisterUsersRegisterPostError,
  RegisterUsersRegisterPostResponse,
  LogoutUserUsersLogoutPostError,
  LogoutUserUsersLogoutPostResponse,
  GetAuthorsAuthorsGetData,
  GetAuthorsAuthorsGetError,
  GetAuthorsAuthorsGetResponse,
  GetAuthorAuthorsAuthorIdGetData,
  GetAuthorAuthorsAuthorIdGetError,
  GetAuthorAuthorsAuthorIdGetResponse,
  CreateAuthorAuthorsCreatePostData,
  CreateAuthorAuthorsCreatePostError,
  CreateAuthorAuthorsCreatePostResponse,
  DeleteAuthorAuthorsAuthorIdDeleteDeleteData,
  DeleteAuthorAuthorsAuthorIdDeleteDeleteError,
  DeleteAuthorAuthorsAuthorIdDeleteDeleteResponse,
  UpdateAuthorAuthorsAuthorIdUpdatePutData,
  UpdateAuthorAuthorsAuthorIdUpdatePutError,
  UpdateAuthorAuthorsAuthorIdUpdatePutResponse,
  GetGenresGenresGetData,
  GetGenresGenresGetError,
  GetGenresGenresGetResponse,
  GetGenreGenresGenreIdGetData,
  GetGenreGenresGenreIdGetError,
  GetGenreGenresGenreIdGetResponse,
  CreateGenreGenresCreatePostData,
  CreateGenreGenresCreatePostError,
  CreateGenreGenresCreatePostResponse,
  DeleteGenreGenresGenreIdDeleteDeleteData,
  DeleteGenreGenresGenreIdDeleteDeleteError,
  DeleteGenreGenresGenreIdDeleteDeleteResponse,
  UpdateGenreGenresGenreIdUpdatePutData,
  UpdateGenreGenresGenreIdUpdatePutError,
  UpdateGenreGenresGenreIdUpdatePutResponse,
  UploadFileStorageUploadPostData,
  UploadFileStorageUploadPostError,
  UploadFileStorageUploadPostResponse,
  DownloadFileStorageDownloadFileNameGetData,
  DownloadFileStorageDownloadFileNameGetError,
  DownloadFileStorageDownloadFileNameGetResponse,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Returns books using search parameters (all of them otherwise)
 */
export const getBooksBooksGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetBooksBooksGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetBooksBooksGetResponse,
    GetBooksBooksGetError,
    ThrowOnError
  >({
    ...options,
    url: '/books/',
  });
};

/**
 * Returns book data
 */
export const getBookBooksBookIdGet = <ThrowOnError extends boolean = false>(
  options: Options<GetBookBooksBookIdGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetBookBooksBookIdGetResponse,
    GetBookBooksBookIdGetError,
    ThrowOnError
  >({
    ...options,
    url: '/books/{book_id}',
  });
};

/**
 * Creates new book. Only for authorized user with admin previlegy
 */
export const createBookBooksCreatePost = <ThrowOnError extends boolean = false>(
  options: Options<CreateBookBooksCreatePostData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateBookBooksCreatePostResponse,
    CreateBookBooksCreatePostError,
    ThrowOnError
  >({
    ...options,
    url: '/books/create',
  });
};

/**
 * Updates book data. Only for authorized user with admin previlegy
 */
export const updateBookBooksBookIdUpdatePut = <
  ThrowOnError extends boolean = false
>(
  options: Options<UpdateBookBooksBookIdUpdatePutData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateBookBooksBookIdUpdatePutResponse,
    UpdateBookBooksBookIdUpdatePutError,
    ThrowOnError
  >({
    ...options,
    url: '/books/{book_id}/update',
  });
};

/**
 * Deletes book. Only for authorized user with admin previlegy
 */
export const deleteBookBooksBookIdDeleteDelete = <
  ThrowOnError extends boolean = false
>(
  options: Options<DeleteBookBooksBookIdDeleteDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteBookBooksBookIdDeleteDeleteResponse,
    DeleteBookBooksBookIdDeleteDeleteError,
    ThrowOnError
  >({
    ...options,
    url: '/books/{book_id}/delete',
  });
};

/**
 * Returns authorized user
 */
export const getProfileUsersProfileGet = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetProfileUsersProfileGetResponse,
    GetProfileUsersProfileGetError,
    ThrowOnError
  >({
    ...options,
    url: '/users/profile',
  });
};

/**
 * Logs user in
 */
export const loginUsersLoginPost = <ThrowOnError extends boolean = false>(
  options: Options<LoginUsersLoginPostData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    LoginUsersLoginPostResponse,
    LoginUsersLoginPostError,
    ThrowOnError
  >({
    ...options,
    url: '/users/login',
  });
};

/**
 * Creates new user
 */
export const registerUsersRegisterPost = <ThrowOnError extends boolean = false>(
  options: Options<RegisterUsersRegisterPostData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    RegisterUsersRegisterPostResponse,
    RegisterUsersRegisterPostError,
    ThrowOnError
  >({
    ...options,
    url: '/users/register',
  });
};

/**
 * Log out of system
 */
export const logoutUserUsersLogoutPost = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    LogoutUserUsersLogoutPostResponse,
    LogoutUserUsersLogoutPostError,
    ThrowOnError
  >({
    ...options,
    url: '/users/logout',
  });
};

/**
 * Returns authors
 */
export const getAuthorsAuthorsGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetAuthorsAuthorsGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetAuthorsAuthorsGetResponse,
    GetAuthorsAuthorsGetError,
    ThrowOnError
  >({
    ...options,
    url: '/authors/',
  });
};

/**
 * Returns author
 */
export const getAuthorAuthorsAuthorIdGet = <
  ThrowOnError extends boolean = false
>(
  options: Options<GetAuthorAuthorsAuthorIdGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetAuthorAuthorsAuthorIdGetResponse,
    GetAuthorAuthorsAuthorIdGetError,
    ThrowOnError
  >({
    ...options,
    url: '/authors/{author_id}',
  });
};

/**
 * Creates authors
 */
export const createAuthorAuthorsCreatePost = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreateAuthorAuthorsCreatePostData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateAuthorAuthorsCreatePostResponse,
    CreateAuthorAuthorsCreatePostError,
    ThrowOnError
  >({
    ...options,
    url: '/authors/create',
  });
};

/**
 * Deletes authors
 */
export const deleteAuthorAuthorsAuthorIdDeleteDelete = <
  ThrowOnError extends boolean = false
>(
  options: Options<DeleteAuthorAuthorsAuthorIdDeleteDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteAuthorAuthorsAuthorIdDeleteDeleteResponse,
    DeleteAuthorAuthorsAuthorIdDeleteDeleteError,
    ThrowOnError
  >({
    ...options,
    url: '/authors/{author_id}/delete',
  });
};

/**
 * Updates authors
 */
export const updateAuthorAuthorsAuthorIdUpdatePut = <
  ThrowOnError extends boolean = false
>(
  options: Options<UpdateAuthorAuthorsAuthorIdUpdatePutData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateAuthorAuthorsAuthorIdUpdatePutResponse,
    UpdateAuthorAuthorsAuthorIdUpdatePutError,
    ThrowOnError
  >({
    ...options,
    url: '/authors/{author_id}/update',
  });
};

/**
 * Returns genres
 */
export const getGenresGenresGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetGenresGenresGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetGenresGenresGetResponse,
    GetGenresGenresGetError,
    ThrowOnError
  >({
    ...options,
    url: '/genres/',
  });
};

/**
 * Returns genre
 */
export const getGenreGenresGenreIdGet = <ThrowOnError extends boolean = false>(
  options: Options<GetGenreGenresGenreIdGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetGenreGenresGenreIdGetResponse,
    GetGenreGenresGenreIdGetError,
    ThrowOnError
  >({
    ...options,
    url: '/genres/{genre_id}',
  });
};

/**
 * Creates genres
 */
export const createGenreGenresCreatePost = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreateGenreGenresCreatePostData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateGenreGenresCreatePostResponse,
    CreateGenreGenresCreatePostError,
    ThrowOnError
  >({
    ...options,
    url: '/genres/create',
  });
};

/**
 * Deletes genres
 */
export const deleteGenreGenresGenreIdDeleteDelete = <
  ThrowOnError extends boolean = false
>(
  options: Options<DeleteGenreGenresGenreIdDeleteDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteGenreGenresGenreIdDeleteDeleteResponse,
    DeleteGenreGenresGenreIdDeleteDeleteError,
    ThrowOnError
  >({
    ...options,
    url: '/genres/{genre_id}/delete',
  });
};

/**
 * Updates genres
 */
export const updateGenreGenresGenreIdUpdatePut = <
  ThrowOnError extends boolean = false
>(
  options: Options<UpdateGenreGenresGenreIdUpdatePutData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateGenreGenresGenreIdUpdatePutResponse,
    UpdateGenreGenresGenreIdUpdatePutError,
    ThrowOnError
  >({
    ...options,
    url: '/genres/{genre_id}/update',
  });
};

/**
 * Upload File
 */
export const uploadFileStorageUploadPost = <
  ThrowOnError extends boolean = false
>(
  options: Options<UploadFileStorageUploadPostData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    UploadFileStorageUploadPostResponse,
    UploadFileStorageUploadPostError,
    ThrowOnError
  >({
    ...options,
    ...formDataBodySerializer,
    headers: {
      'Content-Type': null,
      ...options?.headers,
    },
    url: '/storage/upload/',
  });
};

/**
 * Download File
 */
export const downloadFileStorageDownloadFileNameGet = <
  ThrowOnError extends boolean = false
>(
  options: Options<DownloadFileStorageDownloadFileNameGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    DownloadFileStorageDownloadFileNameGetResponse,
    DownloadFileStorageDownloadFileNameGetError,
    ThrowOnError
  >({
    ...options,
    url: '/storage/download/{file_name}',
  });
};
