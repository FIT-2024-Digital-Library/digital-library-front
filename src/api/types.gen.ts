// This file is auto-generated by @hey-api/openapi-ts

export type Author = {
  name: string;
  id: number;
};

export type AuthorCreate = {
  name: string;
};

export type Body_upload_file_storage__post = {
  file: Blob | File;
};

export type Book = {
  themeId: number;
  title: string;
  author: string;
  genre?: string | null;
  publishedDate?: number | null;
  description?: string | null;
  imageQname?: string;
  pdfQname: string;
  avgMark?: number | null;
  marksCount?: number | null;
  id: number;
};

export type BookCreate = {
  themeId: number;
  title: string;
  author: string;
  genre?: string | null;
  publishedDate?: number | null;
  description?: string | null;
  imageQname?: string;
  pdfQname: string;
  avgMark?: number | null;
  marksCount?: number | null;
};

export type BookUpdate = {
  themeId?: number | null;
  title?: string | null;
  author?: string | null;
  genre?: string | null;
  publishedDate?: number | null;
  description?: string | null;
  imageQname?: string | null;
  pdfQname?: string | null;
  avgMark?: number | null;
  marksCount?: number | null;
};

export type FileUploadedScheme = {
  qname: string;
};

export type Genre = {
  name: string;
  id: number;
};

export type GenreCreate = {
  name: string;
};

export type HTTPValidationError = {
  detail?: Array<ValidationError>;
};

export type PrivilegesEnum = 'basic' | 'moderator' | 'admin';

export type Review = {
  mark: number;
  text: string;
  bookId: number;
  id: number;
  ownerId: number;
  lastEditDate: string;
};

export type ReviewCreate = {
  mark: number;
  text: string;
  bookId: number;
};

export type ReviewUpdate = {
  mark: number;
  text: string;
};

export type User = {
  /**
   * Имя, от 3 до 50 символов
   */
  name: string;
  /**
   * Электронная почта
   */
  email: string;
  privileges: PrivilegesEnum;
  id: number;
};

export type UserLogin = {
  /**
   * Электронная почта
   */
  email: string;
  /**
   * Пароль, от 5 до 50 знаков
   */
  password: string;
};

export type UserLogined = {
  /**
   * Имя, от 3 до 50 символов
   */
  name: string;
  /**
   * Электронная почта
   */
  email: string;
  privileges: PrivilegesEnum;
};

export type UserRegister = {
  /**
   * Электронная почта
   */
  email: string;
  /**
   * Пароль, от 5 до 50 знаков
   */
  password: string;
  /**
   * Имя, от 3 до 50 символов
   */
  name: string;
};

export type UserUpdate = {
  /**
   * Имя, от 3 до 50 символов
   */
  name?: string | null;
  /**
   * Пароль, от 5 до 50 знаков
   */
  password?: string | null;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type GetBooksBooksGetData = {
  query?: {
    /**
     * Filter by author
     */
    author?: string | null;
    /**
     * Filter by description keyword
     */
    description?: string | null;
    /**
     * Filter by name
     */
    genre?: string | null;
    /**
     * Maximum mark (from 1 to 5 inclusive)
     */
    max_mark?: number | null;
    /**
     * Minimum mark (from 1 to 5 inclusive)
     */
    min_mark?: number | null;
    /**
     * Filter by publication year
     */
    published_date?: number | null;
    /**
     * Filter by book title
     */
    title?: string | null;
  };
};

export type GetBooksBooksGetResponse = Array<number>;

export type GetBooksBooksGetError = HTTPValidationError;

export type GetBookBooksBookIdGetData = {
  path: {
    book_id: number;
  };
};

export type GetBookBooksBookIdGetResponse = Book;

export type GetBookBooksBookIdGetError = HTTPValidationError;

export type CreateBookBooksCreatePostData = {
  body: BookCreate;
};

export type CreateBookBooksCreatePostResponse = Book;

export type CreateBookBooksCreatePostError = HTTPValidationError;

export type UpdateBookBooksBookIdUpdatePutData = {
  body: BookUpdate;
  path: {
    book_id: number;
  };
};

export type UpdateBookBooksBookIdUpdatePutResponse = Book;

export type UpdateBookBooksBookIdUpdatePutError = HTTPValidationError;

export type DeleteBookBooksBookIdDeleteDeleteData = {
  path: {
    book_id: number;
  };
};

export type DeleteBookBooksBookIdDeleteDeleteResponse = Book;

export type DeleteBookBooksBookIdDeleteDeleteError = HTTPValidationError;

export type ContextSearchComplexSearchContextGetData = {
  query: {
    query: string;
  };
};

export type ContextSearchComplexSearchContextGetResponse = Array<number>;

export type ContextSearchComplexSearchContextGetError = HTTPValidationError;

export type SemanticSearchComplexSearchSemanticGetData = {
  query: {
    query: string;
  };
};

export type SemanticSearchComplexSearchSemanticGetResponse = Array<number>;

export type SemanticSearchComplexSearchSemanticGetError = HTTPValidationError;

export type GetProfileUsersProfileGetResponse = User;

export type GetProfileUsersProfileGetError = unknown;

export type LoginUsersLoginPostData = {
  body: UserLogin;
};

export type LoginUsersLoginPostResponse = User;

export type LoginUsersLoginPostError = HTTPValidationError;

export type RegisterUsersRegisterPostData = {
  body: UserRegister;
};

export type RegisterUsersRegisterPostResponse = UserLogined;

export type RegisterUsersRegisterPostError = HTTPValidationError;

export type LogoutUserUsersLogoutPostResponse = unknown;

export type LogoutUserUsersLogoutPostError = unknown;

export type SetPrivilegeForUserUsersUserIdSetPrivilegePostData = {
  path: {
    user_id: number;
  };
  query: {
    privilege: PrivilegesEnum;
  };
};

export type SetPrivilegeForUserUsersUserIdSetPrivilegePostResponse = User;

export type SetPrivilegeForUserUsersUserIdSetPrivilegePostError =
  HTTPValidationError;

export type UpdateUserByIdUsersUserIdUpdatePutData = {
  body: UserUpdate;
  path: {
    user_id: number;
  };
};

export type UpdateUserByIdUsersUserIdUpdatePutResponse = User;

export type UpdateUserByIdUsersUserIdUpdatePutError = HTTPValidationError;

export type DeleteUserByIdUsersUserIdDeleteDeleteData = {
  path: {
    user_id: number;
  };
};

export type DeleteUserByIdUsersUserIdDeleteDeleteResponse = User;

export type DeleteUserByIdUsersUserIdDeleteDeleteError = HTTPValidationError;

export type GetUserByIdUsersUserIdGetData = {
  path: {
    user_id: number;
  };
};

export type GetUserByIdUsersUserIdGetResponse = User;

export type GetUserByIdUsersUserIdGetError = HTTPValidationError;

export type GetUsersUsersGetResponse = Array<User>;

export type GetUsersUsersGetError = unknown;

export type GetAuthorsAuthorsGetData = {
  query?: {
    /**
     * Find by author name
     */
    name?: string | null;
  };
};

export type GetAuthorsAuthorsGetResponse = Array<Author>;

export type GetAuthorsAuthorsGetError = HTTPValidationError;

export type GetAuthorAuthorsAuthorIdGetData = {
  path: {
    author_id: number;
  };
};

export type GetAuthorAuthorsAuthorIdGetResponse = Author;

export type GetAuthorAuthorsAuthorIdGetError = HTTPValidationError;

export type CreateAuthorAuthorsCreatePostData = {
  body: AuthorCreate;
};

export type CreateAuthorAuthorsCreatePostResponse = number;

export type CreateAuthorAuthorsCreatePostError = HTTPValidationError;

export type DeleteAuthorAuthorsAuthorIdDeleteDeleteData = {
  path: {
    author_id: number;
  };
};

export type DeleteAuthorAuthorsAuthorIdDeleteDeleteResponse = Author;

export type DeleteAuthorAuthorsAuthorIdDeleteDeleteError = HTTPValidationError;

export type UpdateAuthorAuthorsAuthorIdUpdatePutData = {
  body: AuthorCreate;
  path: {
    author_id: number;
  };
};

export type UpdateAuthorAuthorsAuthorIdUpdatePutResponse = Author;

export type UpdateAuthorAuthorsAuthorIdUpdatePutError = HTTPValidationError;

export type GetGenresGenresGetData = {
  query?: {
    /**
     * Find by genre name
     */
    name?: string | null;
  };
};

export type GetGenresGenresGetResponse = Array<Genre>;

export type GetGenresGenresGetError = HTTPValidationError;

export type GetGenreGenresGenreIdGetData = {
  path: {
    genre_id: number;
  };
};

export type GetGenreGenresGenreIdGetResponse = Genre;

export type GetGenreGenresGenreIdGetError = HTTPValidationError;

export type CreateGenreGenresCreatePostData = {
  body: GenreCreate;
};

export type CreateGenreGenresCreatePostResponse = number;

export type CreateGenreGenresCreatePostError = HTTPValidationError;

export type DeleteGenreGenresGenreIdDeleteDeleteData = {
  path: {
    genre_id: number;
  };
};

export type DeleteGenreGenresGenreIdDeleteDeleteResponse = Genre;

export type DeleteGenreGenresGenreIdDeleteDeleteError = HTTPValidationError;

export type UpdateGenreGenresGenreIdUpdatePutData = {
  body: GenreCreate;
  path: {
    genre_id: number;
  };
};

export type UpdateGenreGenresGenreIdUpdatePutResponse = Genre;

export type UpdateGenreGenresGenreIdUpdatePutError = HTTPValidationError;

export type UploadFileStoragePostData = {
  body: Body_upload_file_storage__post;
};

export type UploadFileStoragePostResponse = FileUploadedScheme;

export type UploadFileStoragePostError = HTTPValidationError;

export type DownloadFileStorageDownloadFilenameGetData = {
  path: {
    filename: string;
  };
};

export type DownloadFileStorageDownloadFilenameGetResponse = unknown;

export type DownloadFileStorageDownloadFilenameGetError = HTTPValidationError;

export type ListFilesStorageListGetResponse = Array<FileUploadedScheme>;

export type ListFilesStorageListGetError = unknown;

export type DeleteFileStorageFilenameDeleteData = {
  path: {
    filename: string;
  };
};

export type DeleteFileStorageFilenameDeleteResponse = unknown;

export type DeleteFileStorageFilenameDeleteError = HTTPValidationError;

export type GetReviewsReviewsGetData = {
  query?: {
    bookId?: number | null;
    limit?: number;
    offset?: number;
    ownerId?: number | null;
  };
};

export type GetReviewsReviewsGetResponse = Array<number>;

export type GetReviewsReviewsGetError = HTTPValidationError;

export type GetReviewReviewsReviewIdGetData = {
  path: {
    review_id: number;
  };
};

export type GetReviewReviewsReviewIdGetResponse = Review;

export type GetReviewReviewsReviewIdGetError = HTTPValidationError;

export type GetAverageMarkReviewsAverageBookIdGetData = {
  path: {
    book_id: number;
  };
};

export type GetAverageMarkReviewsAverageBookIdGetResponse = number;

export type GetAverageMarkReviewsAverageBookIdGetError = HTTPValidationError;

export type GetMarksCountReviewsCountBookIdGetData = {
  path: {
    book_id: number;
  };
};

export type GetMarksCountReviewsCountBookIdGetResponse = number;

export type GetMarksCountReviewsCountBookIdGetError = HTTPValidationError;

export type CreateReviewReviewsCreatePostData = {
  body: ReviewCreate;
};

export type CreateReviewReviewsCreatePostResponse = Review;

export type CreateReviewReviewsCreatePostError = HTTPValidationError;

export type UpdateReviewReviewsReviewIdUpdatePutData = {
  body: ReviewUpdate;
  path: {
    review_id: number;
  };
};

export type UpdateReviewReviewsReviewIdUpdatePutResponse = Review;

export type UpdateReviewReviewsReviewIdUpdatePutError = HTTPValidationError;

export type DeleteReviewReviewsReviewIdDeleteDeleteData = {
  path: {
    review_id: number;
  };
};

export type DeleteReviewReviewsReviewIdDeleteDeleteResponse = Review;

export type DeleteReviewReviewsReviewIdDeleteDeleteError = HTTPValidationError;
